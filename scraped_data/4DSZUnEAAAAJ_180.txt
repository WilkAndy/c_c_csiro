{"container_type": "Publication", "source": "AUTHOR_PUBLICATION_ENTRY", "bib": {"title": "Using Workspace to automate workflow processes for modelling and simulation in engineering", "pub_year": 2015, "citation": "MODSIM2015, 21st international congress on modelling and simulation \u2026, 2015", "author": "PW Cleary and D Thomas and M Bolger and L Hetherton and C Rucinski and D Watkins", "journal": "MODSIM2015, 21st international congress on modelling and simulation, modelling and simulation society of Australia and New Zealand, Gold Coast", "pages": "669-675", "abstract": "Workspace provides a framework that allows researchers to focus on their science, to develop robust and sustainable software and to accelerate software development timeframes with a faster path to market for their commercialisation. The requirements of scientific application development such as visualisation, distributed computing, testing, integration and provenance reporting are all provided. Researchers and developers can easily develop new capabilities or expose existing libraries through C, C++, Python or JavaScript via inbuilt facilities, or \u201ccallout\u201d to other software packages such as R. The Workspace framework makes it straightforward to mix and match existing and new capabilities within an easy to use graphical drag and drop environment, without the burden of having to design and implement the glue to make the components work together. Workflows are built and modified using an intuitive flow chart like graphical interface. They can then be executed directly within the workflow editor environment (typically as part of research or development), batch executed using the command line, or can have customised user interfaces attached (which is typical when creating fully compiled software products for distribution to other users). Workspace is built upon Qt and makes use of Qt Designer for development of application graphical user interfaces which can be connected to the Workspace workflows. Workspace is able to provide significant interoperability between otherwise independently developed and incompatible software components or operations. This is particularly useful in collaborative development between different disciplines or \u2026"}, "filled": true, "author_pub_id": "4DSZUnEAAAAJ:65Yg0jNCQDAC", "num_citations": 18, "citedby_url": "/scholar?hl=en&cites=3250324733969547377", "cites_id": ["3250324733969547377"], "pub_url": "https://scholar.google.com/scholar?cluster=3250324733969547377&hl=en&oi=scholarr", "url_related_articles": "/scholar?oi=bibs&hl=en&oe=ASCII&q=related:ccDr5B95Gy0J:scholar.google.com/", "cites_per_year": {"2017": 5, "2018": 2, "2019": 3, "2020": 4, "2021": 2, "2022": 0, "2023": 1}}